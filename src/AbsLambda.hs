-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Lambda.

module AbsLambda where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Expression
    = ELambda Ident Expression
    | EIf Expression Expression Expression
    | EAnd Expression Expression
    | EOr Expression Expression
    | EPlus Expression Expression
    | ELet Ident Expression Expression
    | ENot Expression
    | ECall Expression Expression
    | ETrue
    | EFalse
    | ENum Integer
    | EVar Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)


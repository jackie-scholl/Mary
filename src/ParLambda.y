-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLambda where
import AbsLambda
import LexLambda
import ErrM

}

%name pExpression Expression
%name pExpression1 Expression1
%name pExpression2 Expression2
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '.' { PT _ (TS _ 3) }
  '~' { PT _ (TS _ 4) }

L_ident  { PT _ (TV $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }

Expression :: { Expression }
Expression : '~' Ident '.' Expression { AbsLambda.Lambda $2 $4 }
           | Expression1 { $1 }
Expression1 :: { Expression }
Expression1 : Expression1 Expression2 { AbsLambda.Application $1 $2 }
            | Expression2 { $1 }
Expression2 :: { Expression }
Expression2 : Ident { AbsLambda.ID $1 } | '(' Expression ')' { $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}


-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLambda where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLambda

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLambda.Ident -> Result
transIdent x = case x of
  AbsLambda.Ident string -> failure x

transExpression :: AbsLambda.Expression -> Result
transExpression x = case x of
  AbsLambda.ELambda ident expression -> failure x
  AbsLambda.EIf expression1 expression2 expression3 -> failure x
  AbsLambda.EAnd expression1 expression2 -> failure x
  AbsLambda.EOr expression1 expression2 -> failure x
  AbsLambda.ELet ident expression1 expression2 -> failure x
  AbsLambda.ENot expression -> failure x
  AbsLambda.ECall expression1 expression2 -> failure x
  AbsLambda.ETrue -> failure x
  AbsLambda.EFalse -> failure x
  AbsLambda.ENum integer -> failure x
  AbsLambda.EVar ident -> failure x
